# Rustodon Project Rules
# A Rust implementation of Mastodon server backend
# Author: arkSong (arksong2018@gmail.com)
# Project: rustodon

## Project Overview
- Project Name: rustodon
- Language: Rust
- Architecture: Modular crates with standard Rust project structure
- Goal: 100% compatibility with original Mastodon server functionality
- Target: High-performance, type-safe, concurrent server backend

## Code Standards

### File Structure
- Each file must have detailed header comments in English
- All functions must have detailed documentation comments
- Use standard Rust naming conventions (snake_case for functions, PascalCase for types)
- Organize code with clear separation of concerns

### Documentation Requirements
- Every file must start with detailed header comments including:
  - File purpose and functionality
  - Author information
  - Dependencies and relationships
  - Usage examples where appropriate
- All public functions must have `///` documentation comments
- Include `# Examples` sections in documentation where helpful

### Logging Standards
- Use `tracing` crate for structured logging
- Include timestamps in all log entries
- Use appropriate log levels (error, warn, info, debug, trace)
- Log at function entry/exit points for debugging
- Include context information in log messages

### Error Handling
- Use `Result<T, E>` for all fallible operations
- Implement custom error types using `thiserror` crate
- Provide meaningful error messages
- Handle errors gracefully with proper logging
- Never use `unwrap()` or `expect()` in production code

### Testing Requirements
- Every module must have comprehensive test coverage
- Use `#[cfg(test)]` for test modules
- Include unit tests, integration tests, and property-based tests
- All tests must pass with `cargo test`
- Mock external dependencies in tests
- Use `tokio::test` for async tests

### Architecture Guidelines
- Follow Rust best practices and idioms
- Use async/await for I/O operations
- Implement proper resource management
- Use strong typing and avoid `unwrap()`
- Follow SOLID principles
- Implement proper separation of concerns

### Dependencies
- Use stable, well-maintained crates
- Minimize dependency tree
- Prefer async-first libraries
- Use `serde` for serialization
- Use `tokio` for async runtime
- Use `sqlx` for database operations
- Use `axum` for web framework
- Use `tracing` for logging

### Performance Considerations
- Use efficient data structures
- Implement proper caching strategies
- Optimize database queries
- Use connection pooling
- Implement rate limiting
- Handle concurrent requests efficiently

### Security Requirements
- Validate all input data
- Implement proper authentication and authorization
- Use secure defaults
- Follow OWASP guidelines
- Implement proper CORS policies
- Use HTTPS in production

### Compatibility Goals
- Maintain 100% API compatibility with original Mastodon
- Support ActivityPub protocol
- Implement all original endpoints
- Maintain database schema compatibility
- Support all original features

### Development Workflow
- Run `cargo check` after every change
- Run `cargo test` after every change
- Fix all compiler warnings and errors
- Use `cargo fmt` for code formatting
- Use `cargo clippy` for linting
- Commit frequently with meaningful messages

### Module Organization
- Each crate should have a single responsibility
- Use feature flags for optional functionality
- Implement proper public APIs
- Hide internal implementation details
- Use workspace for managing multiple crates

### Database Design
- Use SQLx for type-safe database operations
- Implement proper migrations
- Use connection pooling
- Implement proper transaction handling
- Support multiple database backends

### API Design
- Follow RESTful principles
- Implement proper HTTP status codes
- Use JSON for data exchange
- Implement proper pagination
- Support filtering and sorting
- Implement rate limiting

### Configuration Management
- Use environment variables for configuration
- Implement proper configuration validation
- Support different environments (dev, test, prod)
- Use secure configuration practices
- Implement configuration hot-reloading where appropriate

### Monitoring and Observability
- Implement health check endpoints
- Use structured logging
- Implement metrics collection
- Use distributed tracing
- Monitor performance and errors

### Deployment Considerations
- Support containerization (Docker)
- Implement proper health checks
- Use environment-specific configurations
- Support horizontal scaling
- Implement graceful shutdown

### Code Quality
- Write self-documenting code
- Use meaningful variable and function names
- Keep functions small and focused
- Avoid code duplication
- Use proper abstractions
- Implement proper error handling

### Testing Strategy
- Unit tests for individual functions
- Integration tests for API endpoints
- Property-based tests for data structures
- Performance tests for critical paths
- Security tests for authentication/authorization
- Compatibility tests with original Mastodon

### Documentation
- Maintain comprehensive README files
- Document API endpoints
- Provide usage examples
- Document configuration options
- Maintain changelog
- Provide migration guides

### Performance Benchmarks
- Establish performance baselines
- Monitor performance regressions
- Optimize critical paths
- Use profiling tools
- Implement caching strategies

### Security Auditing
- Regular security reviews
- Dependency vulnerability scanning
- Code security analysis
- Penetration testing
- Security best practices compliance

### Maintenance
- Regular dependency updates
- Security patches
- Performance optimizations
- Bug fixes
- Feature enhancements
- Documentation updates

## Project Structure Guidelines

### Crate Organization
```
rustodon/
├── Cargo.toml (workspace)
├── Cargo.lock
├── README.md
├── .cursorrules
├── rustodon-core/           # Core types and traits
├── rustodon-db/            # Database operations
├── rustodon-api/           # HTTP API layer
├── rustodon-auth/          # Authentication & authorization
├── rustodon-activitypub/   # ActivityPub protocol
├── rustodon-workers/       # Background job processing
├── rustodon-search/        # Search functionality
├── rustodon-mailer/        # Email functionality
├── rustodon-admin/         # Admin interface
├── rustodon-config/        # Configuration management
├── rustodon-logging/       # Logging infrastructure
├── rustodon-metrics/       # Metrics and monitoring
├── rustodon-cache/         # Caching layer
├── rustodon-queue/         # Message queue
├── rustodon-storage/       # File storage
├── rustodon-notifications/ # Notification system
├── rustodon-media/         # Media processing
├── rustodon-federation/    # Federation logic
├── rustodon-webhooks/      # Webhook handling
├── rustodon-scheduler/     # Scheduled tasks
├── rustodon-migrations/    # Database migrations
├── rustodon-cli/           # Command line interface
├── rustodon-server/        # Main server binary
└── tests/                  # Integration tests
```

### File Naming Conventions
- Use snake_case for file names
- Use descriptive names that indicate purpose
- Group related functionality in modules
- Use mod.rs for module organization

### Module Structure
```rust
//! Module description and purpose
//!
//! This module provides [specific functionality] for the Rustodon server.
//! It handles [specific responsibilities] and integrates with [other modules].
//!
//! # Examples
//!
//! ```rust
//! use rustodon_core::example::Example;
//!
//! let example = Example::new();
//! example.doSomething();
//! ```
//!
//! # Dependencies
//!
//! - `rustodon_core`: Core types and traits
//! - `rustodon_db`: Database operations
//!
//! # Author
//!
//! arkSong (arksong2018@gmail.com)

use tracing::{info, warn, error, debug, trace};
use serde::{Deserialize, Serialize};
use thiserror::Error;

/// Custom error type for this module
#[derive(Error, Debug)]
pub enum ModuleError {
    #[error("Database error: {0}")]
    Database(#[from] sqlx::Error),
    #[error("Validation error: {0}")]
    Validation(String),
    #[error("Internal error: {0}")]
    Internal(String),
}

/// Main struct for this module
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ModuleStruct {
    /// Field description
    pub field: String,
}

impl ModuleStruct {
    /// Creates a new instance of ModuleStruct
    ///
    /// # Arguments
    ///
    /// * `field` - The field value
    ///
    /// # Returns
    ///
    /// A new ModuleStruct instance
    ///
    /// # Examples
    ///
    /// ```rust
    /// use rustodon_module::ModuleStruct;
    ///
    /// let instance = ModuleStruct::new("example");
    /// assert_eq!(instance.field, "example");
    /// ```
    pub fn new(field: impl Into<String>) -> Self {
        let field = field.into();
        trace!("Creating new ModuleStruct with field: {}", field);

        Self { field }
    }

    /// Performs some operation
    ///
    /// # Returns
    ///
    /// Result indicating success or failure
    pub async fn do_something(&self) -> Result<(), ModuleError> {
        info!("Performing operation on ModuleStruct: {:?}", self);

        // Implementation here

        debug!("Operation completed successfully");
        Ok(())
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use tokio::test;

    #[test]
    fn test_module_struct_new() {
        let instance = ModuleStruct::new("test");
        assert_eq!(instance.field, "test");
    }

    #[tokio::test]
    async fn test_do_something() {
        let instance = ModuleStruct::new("test");
        let result = instance.do_something().await;
        assert!(result.is_ok());
    }
}
```

## Development Commands

### Essential Commands
```bash
# Check code compilation
cargo check

# Run tests
cargo test

# Format code
cargo fmt

# Lint code
cargo clippy

# Build release version
cargo build --release

# Run specific crate tests
cargo test -p rustodon-core

# Run with logging
RUST_LOG=debug cargo run

# Check all crates
cargo check --workspace

# Test all crates
cargo test --workspace
```

### Database Commands
```bash
# Run migrations
cargo run -p rustodon-migrations

# Create new migration
cargo run -p rustodon-migrations create migration_name

# Reset database
cargo run -p rustodon-migrations reset
```

### Development Workflow
1. Make changes to code
2. Run `cargo check` to verify compilation
3. Run `cargo test` to ensure tests pass
4. Run `cargo fmt` to format code
5. Run `cargo clippy` to check for issues
6. Commit changes with meaningful message
7. Push to repository

## Quality Assurance

### Before Committing
- [ ] Code compiles without warnings
- [ ] All tests pass
- [ ] Code is formatted
- [ ] No clippy warnings
- [ ] Documentation is updated
- [ ] Logging is appropriate
- [ ] Error handling is implemented
- [ ] Performance is acceptable

### Before Releasing
- [ ] All integration tests pass
- [ ] Performance benchmarks are met
- [ ] Security audit is completed
- [ ] Documentation is complete
- [ ] Migration scripts are tested
- [ ] Deployment procedures are documented

## Notes
- Always prioritize code quality and maintainability
- Follow Rust best practices and idioms
- Maintain backward compatibility where possible
- Document breaking changes clearly
- Keep dependencies up to date
- Monitor performance and security
- Engage with the community for feedback