# Minimal Dockerfile for Rustodon Testing
# Author: arkSong (arksong2018@gmail.com)
# Project: rustodon
#
# This is a minimal Dockerfile for testing purposes
# It creates a simple web server that responds to basic API endpoints

FROM python:3.11-slim

WORKDIR /app

# Create a simple Python HTTP server
RUN echo '#!/usr/bin/env python3' > /app/server.py && \
    echo 'import http.server' >> /app/server.py && \
    echo 'import socketserver' >> /app/server.py && \
    echo 'import json' >> /app/server.py && \
    echo 'import os' >> /app/server.py && \
    echo '' >> /app/server.py && \
    echo 'class TestHandler(http.server.BaseHTTPRequestHandler):' >> /app/server.py && \
    echo '    def do_GET(self):' >> /app/server.py && \
    echo '        self.send_response(200)' >> /app/server.py && \
    echo '        self.send_header("Content-type", "application/json")' >> /app/server.py && \
    echo '        self.send_header("Access-Control-Allow-Origin", "*")' >> /app/server.py && \
    echo '        self.end_headers()' >> /app/server.py && \
    echo '' >> /app/server.py && \
    echo '        if self.path == "/health":' >> /app/server.py && \
    echo '            response = {"status": "ok", "message": "Health check passed"}' >> /app/server.py && \
    echo '        elif self.path == "/api/v1/instance":' >> /app/server.py && \
    echo '            response = {"version": "1.0.0", "name": "Rustodon Test Server"}' >> /app/server.py && \
    echo '        elif self.path == "/api/v1/timelines/public":' >> /app/server.py && \
    echo '            response = {"statuses": [], "next": None, "prev": None}' >> /app/server.py && \
    echo '        elif self.path.startswith("/api/v1/accounts/"):' >> /app/server.py && \
    echo '            response = {"id": "1", "username": "testuser", "display_name": "Test User"}' >> /app/server.py && \
    echo '        elif self.path.startswith("/api/v1/search"):' >> /app/server.py && \
    echo '            response = {"accounts": [], "statuses": [], "hashtags": []}' >> /app/server.py && \
    echo '        else:' >> /app/server.py && \
    echo '            response = {"message": "Welcome to Rustodon Test Server", "endpoints": ["/health", "/api/v1/instance"]}' >> /app/server.py && \
    echo '' >> /app/server.py && \
    echo '        self.wfile.write(json.dumps(response).encode())' >> /app/server.py && \
    echo '' >> /app/server.py && \
    echo '    def do_POST(self):' >> /app/server.py && \
    echo '        self.send_response(200)' >> /app/server.py && \
    echo '        self.send_header("Content-type", "application/json")' >> /app/server.py && \
    echo '        self.send_header("Access-Control-Allow-Origin", "*")' >> /app/server.py && \
    echo '        self.end_headers()' >> /app/server.py && \
    echo '' >> /app/server.py && \
    echo '        if self.path == "/api/v1/auth/register":' >> /app/server.py && \
    echo '            response = {"token": "test_token_123", "user_id": "1"}' >> /app/server.py && \
    echo '        elif self.path == "/api/v1/auth/login":' >> /app/server.py && \
    echo '            response = {"token": "test_token_123", "user_id": "1"}' >> /app/server.py && \
    echo '        elif self.path == "/api/v1/statuses":' >> /app/server.py && \
    echo '            response = {"id": "1", "content": "Test status", "created_at": "2025-01-01T00:00:00Z"}' >> /app/server.py && \
    echo '        else:' >> /app/server.py && \
    echo '            response = {"error": "Endpoint not implemented"}' >> /app/server.py && \
    echo '' >> /app/server.py && \
    echo '        self.wfile.write(json.dumps(response).encode())' >> /app/server.py && \
    echo '' >> /app/server.py && \
    echo '    def log_message(self, format, *args):' >> /app/server.py && \
    echo '        print(f"[{self.log_date_time_string()}] {format % args}")' >> /app/server.py && \
    echo '' >> /app/server.py && \
    echo 'if __name__ == "__main__":' >> /app/server.py && \
    echo '    PORT = 3000' >> /app/server.py && \
    echo '    with socketserver.TCPServer(("", PORT), TestHandler) as httpd:' >> /app/server.py && \
    echo '        print(f"Server running on port {PORT}")' >> /app/server.py && \
    echo '        httpd.serve_forever()' >> /app/server.py

EXPOSE 3000

CMD ["python3", "/app/server.py"]
